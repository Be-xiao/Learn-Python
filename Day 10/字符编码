分析过程
x = '上'
                  内存
上-----翻译----->01010010
上<-----翻译<-----01010010

字符编码表就是一张字符与数字的对应关系的表

a-00
b-01
c-10
d-11

ASCII表：
    1、只支持英文字符串
    2、采用8位的二进制数对应一个英文字符串

GBK表：
    1、支持英文字符、中文字符
    2、采用8位二进制数对应一个英文字符串
       采用16位二进制数对应一个中文字符串

1、Unicode：（内存中统一使用Unicode）
    1、兼容万国字符
       与万国字符都有对应关系
    2、采用16 （16bit = 2Bytes）位二进制数对应一个中文字符串
    个别生僻字会采用4Bytes、8Bytes

    Unicode表：
        人类字符=====Unicode格式的数字======
                    |                 |
                    |                 |
                    |                 |
                   硬盘
                    |                 |
                    |                 |
                    |                 |
              GBK格式的二进制   Shift-JIS格式的二进制

        老的字符编码都可以转换成Unicode，但是不能通过Unicode互转

utf-8:Unicode transform format-8:
    英文->1Bytes
    汉字—>3Bytes

2、结论：
    1、内存固定使用Unicode，我们可以改变的是存入硬盘采用的格式
    2、文本文件存取乱码问题
        存乱了：解决方法，编码格式应该设置成支持文件内容
        取乱了：解决方法，文件以什么编码格式存入硬盘的，就应该以什么编码格式读入内容

3、python解释默认读文件的编码：
    Python3默认：utf - 8
    Python2默认：ASCII

    指定文件头修改默认的编码：
    在py文件的首行写：
        # coding：GBK

4、保证运行Python程序前两个阶段不乱码的核心法则：
    指定文件头
    # coding：文件当初存入硬盘时所采用的编码格式

5、python3的str类型默认直接存成Unicode格式，无论如何都不会乱码
   保证Python2的str类型不乱码
    x = u'上'  # 强制存成Unicode

6、python2解释器有两种字符串类型：str、Unicode
    # str类型
    x = '上'  # 字符串会按照文件头指定的编码格式存入变量值的内存空间
    # Unicode类型
    x = u'上'  # 强制存成Unicode

7、
